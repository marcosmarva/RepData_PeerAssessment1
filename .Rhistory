persp(mu, alpha, k3d2, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
alpha
mu
plotK = function(1-mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=1-mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
k3d = outer(mu, alpha, function(mu, alpha){plotK(mu, alpha)})
# Surfaces21.png
persp(mu, alpha, k3d, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
mu=seq(0, 1, by = 0.01)
psi1 = rep(x=30, times = length(mu))
alpha = .5
psi2 = alpha * psi1
psiMatrix = cbind(rep(psi1, length(mu)), rep(psi2, length(mu)))
psi = cbind(psi1, psi2)
par(mfrow = c(1, 2))
muMatrix=cbind(mu, mu)
iterations = iterLoop(transIter = 500, plotIter = 200, paramIter = mu,
J0 = 5, A0 = 5, psi, muMatrix, a = c(.17, .2))
matplot(mu, iterations[[2]], type="l", col="black", xlab="nu", ylab="Total population")
muMatrix=cbind(mu, 1-mu)
iterations = iterLoop(transIter = 500, plotIter = 200, paramIter = mu,
J0 = 5, A0 = 5, psi, muMatrix, a = c(.17, .2))
matplot(mu, iterations[[2]], type="l", col="black", xlab="nu", ylab="Total population")
'%mult%' <- function(a,b) bquote(.(a) * .(b))
'%add%' <- function(a,b) bquote(.(a) + .(b))
first = "phi1C3"
second = "phi2C3"
callFirst = do.call(substitute, list(as.list(get(first))[[1]]))
callSecond = do.call(substitute, list(as.list(get(second))[[1]]))
callCoeff01 = do.call(substitute, list(as.list(coeff01)[[1]]))
callCoeff02 = do.call(substitute, list(as.list(coeff02)[[1]]))
expr_barPhi = (callCoeff01 %mult% callFirst) %add% (callCoeff02 %mult% callSecond)
DbarPhiJ = D(expr_barPhi, "J")
DbarPhiA = D(expr_barPhi, "A")
barSigmaJexp = expression(-(sigmaJ1 * mu1 + sigmaJ2 * (1 - mu1)))
callbarSigmaJ = do.call(substitute, list(as.list(barSigmaJexp)[[1]]))
K = function(sigmaJ1, sigmaJ2, mu1, mu2, psi1, psi2, a1, a2, A, J){}
body(K) <- expK
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
k3d = outer(mu, alpha, function(mu, alpha){plotK(mu, alpha)})
# Surfaces21.png
persp(mu, alpha, k3d, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=1-mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
# Surfaces22.png
persp(mu, alpha, k3d2, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
'%mult%' <- function(a,b) bquote(.(a) * .(b))
'%add%' <- function(a,b) bquote(.(a) + .(b))
first = "phi1C3"
second = "phi2C3"
callFirst = do.call(substitute, list(as.list(get(first))[[1]]))
callSecond = do.call(substitute, list(as.list(get(second))[[1]]))
callCoeff01 = do.call(substitute, list(as.list(coeff01)[[1]]))
callCoeff02 = do.call(substitute, list(as.list(coeff02)[[1]]))
expr_barPhi = (callCoeff01 %mult% callFirst) %add% (callCoeff02 %mult% callSecond)
DbarPhiJ = D(expr_barPhi, "J")
DbarPhiA = D(expr_barPhi, "A")
barSigmaJexp = expression(-(sigmaJ1 * mu1 + sigmaJ2 * (1 - mu1)))
callbarSigmaJ = do.call(substitute, list(as.list(barSigmaJexp)[[1]]))
K = function(sigmaJ1, sigmaJ2, mu1, mu2, psi1, psi2, a1, a2, A, J){}
body(K) <- expK
par(mfrow = c(1, 2), mar=c(1,1,1,1))
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
k3d = outer(mu, alpha, function(mu, alpha){plotK(mu, alpha)})
# Surfaces21.png
persp(mu, alpha, k3d, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=1-mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
# Surfaces22.png
persp(mu, alpha, k3d2, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
a1 = 1
a2 = 1
a = c(a1, a2)
phi1C1 = expression( psi1 *4* exp(-a1 * (J * mu1 + A * mu2)))
phi1C2 = expression( psi1 *(1 + J * mu1 + A * mu2) * exp(- a1 * (J * mu1 + A * mu2)))
phi1C3 = expression( psi1 * (1 + A * mu2) * exp(-a1 * (J * mu1 + A * mu2)))
phi2C1 = expression( psi2 * exp(-a2 * (J * (1 - mu1) +  A * (1 - mu2))))
phi2C2 = expression( psi2 * (1 + 3*(J * (1 - mu1) + A * (1 - mu2))) * exp(-a2 * (J * (1 - mu1) + A * (1 - mu2))))
phi2C3 = expression( psi2 * (1 + A * (1 - mu2)) * exp(-a2 * (J * (1 - mu1) + A * (1 - mu2))))
coeff01 = expression(mu2)
coeff02 = expression((1 - mu2))
'%mult%' <- function(a,b) bquote(.(a) * .(b))
'%add%' <- function(a,b) bquote(.(a) + .(b))
first = "phi1C1"
second = "phi2C2"
callFirst = do.call(substitute, list(as.list(get(first))[[1]]))
callSecond = do.call(substitute, list(as.list(get(second))[[1]]))
callCoeff01 = do.call(substitute, list(as.list(coeff01)[[1]]))
callCoeff02 = do.call(substitute, list(as.list(coeff02)[[1]]))
expr_barPhi = (callCoeff01 %mult% callFirst) %add% (callCoeff02 %mult% callSecond)
DbarPhiJ = D(expr_barPhi, "J")
DbarPhiA = D(expr_barPhi, "A")
barSigmaJexp = expression(-(sigmaJ1 * mu1 + sigmaJ2 * (1 - mu1)))
callbarSigmaJ = do.call(substitute, list(as.list(barSigmaJexp)[[1]]))
expK = callbarSigmaJ %mult% ((expr_barPhi %mult% DbarPhiJ) %add% DbarPhiA)
K = function(sigmaJ1, sigmaJ2, mu1, mu2, psi1, psi2, a1, a2, J, A){}
body(K) <- expK
par(mfrow = c(1, 2))
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
mu = seq(0, 1, length.out = 50)
alpha = seq(-1, 1, length.out = 50)
k3d = outer(mu, alpha, function(mu, alpha){plotK(mu, alpha)})
theta0 = -50
phi0 = 25
# Surfaces11.png
persp(mu, alpha, k3d, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=1-mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
# Surfaces12.png
k3d2 = outer(mu, alpha, function(mu, alpha){plotK(mu, alpha)})
persp(mu, alpha, k3d2, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
a1 = 1
a2 = 1
a = c(a1, a2)
phi1C1 = expression( psi1 *4* exp(-a1 * (J * mu1 + A * mu2)))
phi1C2 = expression( psi1 *(1 + J * mu1 + A * mu2) * exp(- a1 * (J * mu1 + A * mu2)))
phi1C3 = expression( psi1 * (1 + A * mu2) * exp(-a1 * (J * mu1 + A * mu2)))
phi2C1 = expression( psi2 * exp(-a2 * (J * (1 - mu1) +  A * (1 - mu2))))
phi2C2 = expression( psi2 * (1 + 3*(J * (1 - mu1) + A * (1 - mu2))) * exp(-a2 * (J * (1 - mu1) + A * (1 - mu2))))
phi2C3 = expression( psi2 * (1 + A * (1 - mu2)) * exp(-a2 * (J * (1 - mu1) + A * (1 - mu2))))
coeff01 = expression(mu2)
coeff02 = expression((1 - mu2))
'%mult%' <- function(a,b) bquote(.(a) * .(b))
'%add%' <- function(a,b) bquote(.(a) + .(b))
first = "phi1C3"
second = "phi2C3"
callFirst = do.call(substitute, list(as.list(get(first))[[1]]))
callSecond = do.call(substitute, list(as.list(get(second))[[1]]))
callCoeff01 = do.call(substitute, list(as.list(coeff01)[[1]]))
callCoeff02 = do.call(substitute, list(as.list(coeff02)[[1]]))
expr_barPhi = (callCoeff01 %mult% callFirst) %add% (callCoeff02 %mult% callSecond)
DbarPhiJ = D(expr_barPhi, "J")
DbarPhiA = D(expr_barPhi, "A")
barSigmaJexp = expression(-(sigmaJ1 * mu1 + sigmaJ2 * (1 - mu1)))
callbarSigmaJ = do.call(substitute, list(as.list(barSigmaJexp)[[1]]))
expK = callbarSigmaJ %mult% ((expr_barPhi %mult% DbarPhiJ) %add% DbarPhiA)
K = function(sigmaJ1, sigmaJ2, mu1, mu2, psi1, psi2, a1, a2, J, A){}
body(K) <- expK
par(mfrow = c(1, 2))
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
mu = seq(0, 1, length.out = 50)
alpha = seq(-1, 1, length.out = 50)
k3d = outer(mu, alpha, function(mu, alpha){plotK(mu, alpha)})
theta0 = -50
phi0 = 25
# Surfaces11.png
persp(mu, alpha, k3d, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=1-mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
# Surfaces12.png
k3d2 = outer(mu, alpha, function(mu, alpha){plotK(mu, alpha)})
persp(mu, alpha, k3d2, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
a1 = 1
a2 = 1
a = c(a1, a2)
phi1C1 = expression( psi1 *4* exp(-a1 * (J * mu1 + A * mu2)))
phi1C2 = expression( psi1 *(1 + J * mu1 + A * mu2) * exp(- a1 * (J * mu1 + A * mu2)))
phi1C3 = expression( psi1 * (1 + A * mu2) * exp(-a1 * (J * mu1 + A * mu2)))
phi2C1 = expression( psi2 * exp(-a2 * (J * (1 - mu1) +  A * (1 - mu2))))
phi2C2 = expression( psi2 * (1 + 3*(J * (1 - mu1) + A * (1 - mu2))) * exp(-a2 * (J * (1 - mu1) + A * (1 - mu2))))
phi2C3 = expression( psi2 * (1 + A * (1 - mu2)) * exp(-a2 * (J * (1 - mu1) + A * (1 - mu2))))
coeff01 = expression(mu2)
coeff02 = expression((1 - mu2))
'%mult%' <- function(a,b) bquote(.(a) * .(b))
'%add%' <- function(a,b) bquote(.(a) + .(b))
first = "phi1C3"
second = "phi2C3"
callFirst = do.call(substitute, list(as.list(get(first))[[1]]))
callSecond = do.call(substitute, list(as.list(get(second))[[1]]))
callCoeff01 = do.call(substitute, list(as.list(coeff01)[[1]]))
callCoeff02 = do.call(substitute, list(as.list(coeff02)[[1]]))
expr_barPhi = (callCoeff01 %mult% callFirst) %add% (callCoeff02 %mult% callSecond)
DbarPhiJ = D(expr_barPhi, "J")
DbarPhiA = D(expr_barPhi, "A")
barSigmaJexp = expression(-(sigmaJ1 * mu1 + sigmaJ2 * (1 - mu1)))
callbarSigmaJ = do.call(substitute, list(as.list(barSigmaJexp)[[1]]))
expK = callbarSigmaJ %mult% ((expr_barPhi %mult% DbarPhiJ) %add% DbarPhiA)
K = function(sigmaJ1, sigmaJ2, mu1, mu2, psi1, psi2, a1, a2, J, A){}
body(K) <- expK
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
mu = seq(0, 1, length.out = 50)
alpha = seq(-1, 1, length.out = 50)
k3d = outer(mu, alpha, function(mu, alpha){plotK(mu, alpha)})
theta0 = -50
phi0 = 25
# Surfaces11.png
persp(mu, alpha, k3d, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
par(mfrow = c(1, 1))
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
mu = seq(0, 1, length.out = 50)
alpha = seq(-1, 1, length.out = 50)
k3d = outer(mu, alpha, function(mu, alpha){plotK(mu, alpha)})
theta0 = -50
phi0 = 25
# Surfaces21.png
persp(mu, alpha, k3d, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
k3d2 = outer(mu, alpha, function(mu, alpha){plotK(mu, alpha)})
persp(mu, alpha, k3d2, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
persp(mu, alpha, k3d, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
plotK = function(mu, alpha) K(sigmaJ1 = 0.75, sigmaJ2 = 0.75, mu1=mu, mu2=1-mu, psi1=2, psi2= 2+alpha, a1, a2, J=0, A=0)
# Surfaces22.png
k3d2 = outer(mu, alpha, function(mu, alpha){plotK(mu, alpha)})
persp(mu, alpha, k3d2, theta = theta0, phi=phi0, ticktype = "detailed",
xlab = "\n\nmu", ylab = "\n\nalpha", zlab = "\n\nkappa")
phi1Class = 1
phi2Class = 1
a = c(0.1, 0.2)
psi1 = seq(0, 30, by = 0.1)
alpha = 0.5
psi2 = alpha * psi1
psi = cbind(psi1, psi2)
muMatrix = cbind(rep(mu[1], length(psi1)), rep(mu[2], length(psi1)))
iterations = iterLoop(transIter = 500, plotIter = 200, paramIter = psi1,  J0 = 5, A0 = 5, psi, a = c(0.1, 0.2), muMatrix)
matplot(iterations[[1]], iterations[[2]], type="l", col="black", xlab="nu", ylab="Total population")
rm(list=ls())
library(Matrix)
library(expm)
p1J = .4
p2J = .4
p1A = .4
p2A = .4
(muJ = p2J / (p1J + p2J))
(muA = p2A / (p1A + p2A))
(mu = c(muJ, muA))
sigmaJ1 = .2
sigmaJ2 = .75
sigmaA1 = .85
sigmaA2 = .3
barSigmaJ = function(mu)  sigmaJ1 * mu[1] + sigmaJ2 * (1 - mu[1])
barSigmaA = function(mu)  mu[2] * sigmaA1 + (1 - mu[2]) * sigmaA2
phi1 = function(J, A, psi1, mu, a){
if(phi1Class == 1){
psi1 * exp(-a[1] * (J * mu[1] + A * mu[2]))
} else if(phi1Class == 2){
psi1 *(1 + J * mu[1] * A * mu[2]) * exp(- a[1] * (J * mu[1] + A * mu[2]))
} else if(phi1Class == 3){
psi1 * (1 + A * mu[2]) * exp(-a[1] * (J * mu[1] + A * mu[2]))
}
}
phi2 = function(J, A, psi2, mu, a){
if(phi2Class == 1){
psi2 * exp(-a[2] * (J * (1 - mu[1]) +  A * (1 - mu[2])))
} else if(phi2Class == 2){
psi2 * (1 + J * (1 - mu[1]) * A * (1 - mu[2])) * exp(-a[2] * (J * (1 - mu[1]) + A * (1 - mu[2])))
} else if(phi2Class == 3){
psi2 * (1 + A * (1 - mu[2])) * exp(-a[2] * (J * (1 - mu[1]) + A * (1 - mu[2])))
}
}
a = c(0.17, 0.1)
# graphFertilityFunctions
J = seq(0, 40, length.out = 30)
A = seq(0, 40, length.out = 30)
phi1Class=1
z1 = outer(J, A, function(J, A){phi1(J, A, 50, mu, a)})
phi1Class=2
z2 = outer(J, A, function(J, A){phi1(J, A, 50, mu, a)})
phi1Class=3
z3 = outer(J, A, function(J, A){phi1(J, A, 50, mu, a)})
theta0 = 30
phi0 = 30
par(mar=c(.1, 1.2, .1, .1))
par(mfrow = c(1, 3))
persp(J, A, z1, theta = theta0, phi=phi0, col="lightgray",
xlab="\n\nA", ylab="\n\nJ", zlab="\n\nphi")
persp(J, A, z2, theta = theta0, phi=phi0, col="lightgray",
xlab="\n\nA", ylab="\n\nJ", zlab="\n\nphi")
persp(J, A, z3, theta = theta0, phi=phi0, col="lightgray",
xlab="\n\nA", ylab="\n\nJ", zlab="\n\nphi")
par(mfrow = c(1, 1))
# ```{r echo=FALSE, fig.align='center', fig.width=8, fig.height=6}
# <<graphFertilityFunctions_1_1_1>>
#      ```
barPhi = function(J, A, psi, mu, a){
mu[2] * phi1(J, A, psi[1], mu, a) +
(1 - mu[2]) * phi2(J, A,  psi[2], mu, a)
}
RedSys = function(J, A, psi, mu,a){
return(c(A * barPhi(J, A, psi, mu, a),
J * barSigmaJ(mu) + A * barSigmaA(mu)))
}
iterLoop = function(transIter, plotIter, paramIter,
J0=5, A0=5, psi, mu, a){
K = length(paramIter)
iterPerValue = transIter + plotIter
iterRange = 2:iterPerValue
mJ = matrix(rep(0, as.integer(K * iterPerValue)),
ncol= iterPerValue)
mA = matrix(rep(0, as.integer(K * iterPerValue)),
ncol= iterPerValue)
mA[ , 1] = J0
mJ[ , 1] = A0
nu = numeric(K)
for(r in 1:K){
for(c in iterRange){
nextIter = RedSys(mJ[r, c-1], mA[r, c-1], psi[r, ], mu[r, ],a)
mJ[r, c] = nextIter[1]
mA[r, c] = nextIter[2]
}
nu[r] = barSigmaJ(mu[r, ]) * barPhi(0, 0, psi[r, ], mu[r, ], a) /
(1 - barSigmaA(mu[r, ]))
}
mN = mJ[, -(1:transIter)] + mA[, -(1:transIter)]
results = list(nu, mN)
return(results)
}
phi1Class = 1
phi2Class = 1
a = c(0.1, 0.2)
psi1 = seq(0, 30, by = 0.1)
alpha = 0.5
psi2 = alpha * psi1
psi = cbind(psi1, psi2)
muMatrix = cbind(rep(mu[1], length(psi1)), rep(mu[2], length(psi1)))
iterations = iterLoop(transIter = 500, plotIter = 200, paramIter = psi1,  J0 = 5, A0 = 5, psi, a = c(0.1, 0.2), muMatrix)
matplot(iterations[[1]], iterations[[2]], type="l", col="black", xlab="nu", ylab="Total population")
phi1Class = 2
phi2Class = 2
a1 = .1
a2 = .2
a = c(a1, a2)
psi1 = seq(0, 1.5, by = 0.01)
alpha = 0.5
psi2 = alpha * psi1
psi=cbind(psi1,psi2)
iterations = iterLoop(transIter = 500, plotIter = 200, paramIter = psi1,  J0 = 30, A0 = 30, psi, a = c(0.1, 0.2), muMatrix)
matplot(iterations[[1]], iterations[[2]], type="l", col="black", xlab="nu", ylab="Total population", xlim = c(0, 1.05))
nuFunction=function(paramIter, psi, mu, a){
K = length(paramIter)
nu = numeric(K)
for(r in 1:K){
nu[r] = barSigmaJ(mu[r, ]) * barPhi(0, 0, psi, mu[r, ], a) /
(1 - barSigmaA(mu[r, ]))
}
results = nu
return(results)
}
sigmaJ1 = .2
sigmaJ2 = .75
sigmaA1 = .75
sigmaA2 = .2
a1 = .1
a2 = .2
a=c(a1,a2)
psi1 = 2.25
psi2 = 1.75
psi=c(psi1,psi2)
muJ = seq(0, 1, by = .01)
muJin1=rep(1, times = length(muJ))
nRnSymm=nuFunction(muJ, psi, cbind(muJ,muJ), a)
nRnAsymm=nuFunction(muJ, psi, cbind(muJ,1-muJ), a)
nu1 = nuFunction(muJin1, psi, cbind(muJin1,muJin1), a)
nu2 = nuFunction(muJin1-1, psi, cbind(muJin1-1,muJin1-1), a)
line1 = rep(1,times=length(muJ))
par(mfrow = c(1,2), mar=c(5, 5, 1, 1))
matplot(muJ, nRnSymm, type="l", lwd = 4, col="black", xlab="muJ, muA=muJ", ylab="nu", xlim=c(0,1), ylim=c(0,3))
par(new=TRUE)
matplot(muJ, nu1, type="l", lty=2, lwd = 3, col="darkgray", xlab = " ", ylab=" ", xlim=c(0,1), ylim=c(0,3))
par(new=TRUE)
matplot(muJ, nu2, type="l", lty=3, lwd = 3, col="darkgray", xlab = " ", ylab=" ", xlim=c(0,1), ylim=c(0,3))
par(new=TRUE)
matplot(muJ, rep(1,times=length(muJ)), type="l", lwd = 2, col="gray", xlab = "", ylab=" ", xlim=c(0,1), ylim=c(0,3))
matplot(muJ, nRnAsymm, type="l", lwd = 4, col="black", xlab="muJ, muA=1-muJ", ylab="nu", xlim=c(0,1),  ylim=c(0,3))
par(new=TRUE)
matplot(muJ, nu1, type="l", lty=2, lwd = 3, col="darkgray", xlab = " ", ylab=" ", xlim=c(0,1), ylim=c(0,3))
par(new=TRUE)
matplot(muJ, nu2, type="l", lty=3, lwd = 3, col="darkgray", xlab = " ", ylab=" ", xlim=c(0,1), ylim=c(0,3))
par(new=TRUE)
matplot(muJ, rep(1,times=length(muJ)), type="l",  lwd = 2, col="gray", xlab = "", ylab=" ", xlim=c(0,1), ylim=c(0,3))
###################################################################
###################################################################
# bifurcation diagrams
phi1Class = 1
phi2Class = 1
a = c(0.1, 0.2)
psi1 = seq(0, 30, by = 0.1)
alpha = 0.5
psi2 = alpha * psi1
psi = cbind(psi1, psi2)
muMatrix = cbind(rep(mu[1], length(psi1)), rep(mu[2], length(psi1)))
iterations = iterLoop(transIter = 500, plotIter = 200, paramIter = psi1,  J0 = 5, A0 = 5, psi, a = c(0.1, 0.2), muMatrix)
matplot(iterations[[1]], iterations[[2]], type="l", col="black", xlab="nu", ylab="Total population")
par(mfrow = c(1,1), mar=c(5, 5, 1, 1))
matplot(muJ, nRnSymm, type="l", lwd = 4, col="black", xlab="muJ, muA=muJ", ylab="nu", xlim=c(0,1), ylim=c(0,3))
par(new=TRUE)
matplot(muJ, nu1, type="l", lty=2, lwd = 3, col="darkgray", xlab = " ", ylab=" ", xlim=c(0,1), ylim=c(0,3))
par(new=TRUE)
matplot(muJ, nu2, type="l", lty=3, lwd = 3, col="darkgray", xlab = " ", ylab=" ", xlim=c(0,1), ylim=c(0,3))
par(new=TRUE)
matplot(muJ, rep(1,times=length(muJ)), type="l", lwd = 2, col="gray", xlab = "", ylab=" ", xlim=c(0,1), ylim=c(0,3))
matplot(muJ, nRnAsymm, type="l", lwd = 4, col="black", xlab="muJ, muA=1-muJ", ylab="nu", xlim=c(0,1),  ylim=c(0,3))
par(new=TRUE)
matplot(muJ, nu1, type="l", lty=2, lwd = 3, col="darkgray", xlab = " ", ylab=" ", xlim=c(0,1), ylim=c(0,3))
par(new=TRUE)
matplot(muJ, nu2, type="l", lty=3, lwd = 3, col="darkgray", xlab = " ", ylab=" ", xlim=c(0,1), ylim=c(0,3))
par(new=TRUE)
matplot(muJ, rep(1,times=length(muJ)), type="l",  lwd = 2, col="gray", xlab = "", ylab=" ", xlim=c(0,1), ylim=c(0,3))
###################################################################
###################################################################
# bifurcation diagrams
phi1Class = 1
phi2Class = 1
a = c(0.1, 0.2)
psi1 = seq(0, 30, by = 0.1)
alpha = 0.5
psi2 = alpha * psi1
psi = cbind(psi1, psi2)
muMatrix = cbind(rep(mu[1], length(psi1)), rep(mu[2], length(psi1)))
iterations = iterLoop(transIter = 500, plotIter = 200, paramIter = psi1,  J0 = 5, A0 = 5, psi, a = c(0.1, 0.2), muMatrix)
matplot(iterations[[1]], iterations[[2]], type="l", col="black", xlab="nu", ylab="Total population")
phi1Class = 2
phi2Class = 2
a1 = .1
a2 = .2
a = c(a1, a2)
psi1 = seq(0, 1.5, by = 0.01)
alpha = 0.5
psi2 = alpha * psi1
psi=cbind(psi1,psi2)
iterations = iterLoop(transIter = 500, plotIter = 200, paramIter = psi1,  J0 = 30, A0 = 30, psi, a = c(0.1, 0.2), muMatrix)
matplot(iterations[[1]], iterations[[2]], type="l", col="black", xlab="nu", ylab="Total population", xlim = c(0, 1.05))
muestras <- c(29 , 17 , 63 , 31 , 55 , 9 , 92 , 61 , 10 , 16 , 63 , 6 , 61 , 59 , 66 , 41 , 68 , 6 , 99 , 21 , 87 , 68 , 52 , 83 , 66 , 98 , 45 , 50 ,
24 , 100 , 83 , 37 , 44 , 4 , 97 , 67 , 56 , 74 , 75 , 71 , 55 , 22 , 86 , 22 , 93 , 65 , 38 , 84 , 54 , 83 , 100 , 71 , 99 , 19 ,
63 , 11 , 11 , 62 , 91 , 20 , 79 , 42 , 59 , 95 , 70 , 74 , 8 , 25 , 45 , 58 , 57 , 75 , 81 , 34 , 70 , 68 , 39 , 12 , 14 , 21)
setwd("~/Dropbox/Master/courses-master/05_ReproducibleResearch/RepData_PeerAssessment1")
unzip(files = "activity.zip", zipfile = "activity")
data <- read.csv(file = "activity.csv")
data
unzip("activity.zip")
unzip("activity.zip")
head(data)
steps <- data$steps
steps
mean(steps)
steps <- data$steps[!(data$steps %in% NA)]
steps
mean(steps)
table.steps<-table(steps)
hist(table.steps)
table.steps
hist(steps)
unique(data$date)
length(unique(data$date))
split( data , data$date )
data.by.days <-split(data, data$date )
head(data.by.days)
class(data.by.days)
data.by.days[[1]]
class(data.by.days[[1]])
aggregate(data$steps ~ data$date, FUN=mean)
length(unique(data$date))
unique(data$date)
head(data)
data.clean <- data[ ,!(data$steps %in% NA)]
data
data.clean <- data[ , data$steps[!(data$steps %in% NA)]]
!(data$steps %in% NA)
data.clean <- data[ , which(!(data$steps %in% NA))]
which(!(data$steps %in% NA))
data.clean <- data[ ,1]
data.clean
data.clean <- data[which(!(data$steps %in% NA)), ]
aggregate(data.clean$steps ~ data.clean$date, FUN=mean)
length(unique(data.clean$date))
source('~/.active-rstudio-document', echo=TRUE)
hist(dayly.steps)
length(unique(data.clean$date))
(dayly.steps <- aggregate(data.clean$steps ~ data.clean$date, FUN=sum))
hist(dayly.steps)
dayly.steps
hist(dayly.steps$data.clean$steps)
class(dayly.steps$data.clean$steps)
class(dayly.steps)
colnames(dayly.steps) <- c("data", "steps")
hist(dayly.steps$steps)
hist(dayly.steps$steps, main = "Histogram of the daylytotal number of steps")
length(unique(data.clean$date))
colnames(dayly.steps) <- c("date", "total.steps")
(dayly.steps <- aggregate(data.clean$total.steps ~ data.clean$date, FUN=sum))
length(unique(data.clean$date))
(dayly.steps <- aggregate(data.clean$steps ~ data.clean$date, FUN=sum))
colnames(dayly.steps) <- c("date", "steps")
hist(dayly.steps$steps, main = "Histogram of the dayly total number of steps")
data.clean <- data[which(!(data$steps %in% NA)), ]
length(unique(data.clean$date))
(dayly.steps <- aggregate(data.clean$steps ~ data.clean$date, FUN=sum))
colnames(dayly.steps) <- c("date", "steps")
hist(dayly.steps$steps, main = "Histogram of the dayly total number of steps")
dayly.steps
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
time_series <- tapply(data$steps, data$interval, mean, na.rm = TRUE)
plot(row.names(time_series), time_series, type = "l", xlab = "5-min interval",
ylab = "Average across all Days", main = "Average number of steps taken",
col = "red")
unique(data$interval)
length(unique(data$interval))
3600/5
l <- length(unique(data$interval))
data$interval[1, l]
data$interval[c(1, l)]
data$interval[c(1, l+1)]
24*60/5
max(time.series)
